#! /usr/bin/env python2.7

import glob
import matplotlib as mpl

## agg backend is used to create plot as a .png file
mpl.use('GTKAgg')

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import argparse
import numpy as np
import matplotlib.image as mpimg
from matplotlib.lines import Line2D
from pylab import figure, show
import math
import os
import re

def usage():

	print("Author: Mykyta Fastovets / poselib project / 2015")
	print("This utility is an analysis tool for plotting error files generated by the poselib tuners.")
	print("Input should be a .err file.")
	print("Example usage: ./plotSimVsTemp.py ~/file.err ")

def dist(a,b):

	return math.sqrt((a[0]-b[0])**2+(a[1] - b[1])**2)




parser = argparse.ArgumentParser(description='1 non-optional argument')

parser.add_argument('ERRIN', action="store")
parser.add_argument('FRAMENUM', action="store")
parseResult = parser.parse_args()

#DATADIR contains that folder that contains all other data
errFile = parseResult.ERRIN

data = [line.strip().split() for line in open(errFile)] #read the data from the int file
firstLine = data.pop(0) #pop the first line off the data stack

numParams = int(firstLine.pop(0)) #the number of parameters in the file

pfRMS=[]
frameMeans=[]
frameDevs=[]
paramNames=[]
for dataItem in data: #data now contains everything but the first line
	frameID = int(dataItem[0])

	params = [float(x) for x in dataItem[1:numParams+1]]

	#rest of the items are bodypart errors
	partErrors=dataItem[numParams+1:len(dataItem)]


	if frameID==int(parseResult.FRAMENUM): #if we're looking at the right frame

		rmsErr=0 #compute RMS error for this frame
		means=[]
		devs=[]
		for err, stddev in zip(partErrors[0::2], partErrors[1::2]): #for each number
			means.append(float(err))
			devs.append(float(stddev));
		#mMean = np.mean(means)
		#mDev = np.std(means)

		#dMean = np.mean(devs)
		#dDev = np.std(devs)

		#we now have the mean and SD for both, error and SD of labels at a particular frame, to associate with parameters

		frameMeans.append(means)
		frameDevs.append(devs)
		paramNames.append(params)
		pfRMS.append([params, means, devs]) #means and std devs pushed


fig = plt.figure()

ax = fig.add_subplot(111)
ax.yaxis.grid(True, linestyle='-', which='major', color='lightgrey',
              alpha=0.5)
ax.xaxis.grid(True, linestyle='-', which='major', color='lightgrey',
              alpha=0.5)

ap = ax.boxplot(frameMeans, patch_artist=True)

ax.set_ylabel('RMS Error (pix)', fontsize=30)


plt.xticks(rotation=45)

## change outline color, fill color and linewidth of the boxes
for box in ap['boxes']:
    # change outline color
    box.set( color='#7570b3', linewidth=2)
    # change fill color
    box.set( facecolor = '#1b9e77' )

## change color and linewidth of the whiskers
for whisker in ap['whiskers']:
    whisker.set(color='#009933', linewidth=2)

## change color and linewidth of the caps
for cap in ap['caps']:
    cap.set(color='#009933', linewidth=2)

## change color and linewidth of the medians
for median in ap['medians']:
    median.set(color='#b2df8a', linewidth=2)

## change the style of fliers and their fill
for flier in ap['fliers']:
    flier.set(marker='o', color='#e7298a', alpha=0.5)


# bx = fig.add_subplot(212)
# bx.yaxis.grid(True, linestyle='-', which='major', color='lightgrey',
#               alpha=0.5)
# bx.xaxis.grid(True, linestyle='-', which='major', color='lightgrey',
#               alpha=0.5)

bp = ax.boxplot(frameDevs, patch_artist=True)

## change outline color, fill color and linewidth of the boxes
for box in bp['boxes']:
    # change outline color
    box.set( color='#7570b3', linewidth=2)
    # change fill color
    box.set( facecolor = '#771b9e' )

## change color and linewidth of the whiskers
for whisker in bp['whiskers']:
    whisker.set(color='#7570b3', linewidth=2)

## change color and linewidth of the caps
for cap in bp['caps']:
    cap.set(color='#7570b3', linewidth=2)

## change color and linewidth of the medians
for median in bp['medians']:
    median.set(color='#FF6600', linewidth=2)

## change the style of fliers and their fill
for flier in bp['fliers']:
    flier.set(marker='o', color='#e7298a', alpha=0.5)
## Remove top axes and right axes ticks
ax.get_xaxis().tick_bottom()
ax.get_yaxis().tick_left()

# bx.get_xaxis().tick_bottom()
# bx.get_yaxis().tick_left()

plt.xticks(rotation=45)

#plt.setp(paramNames, rotation=45, fontsize=8)
ax.set_xticklabels(paramNames)
# bx.set_xticklabels(paramNames)

print paramNames
# Save the figure
plt.show()
fig.savefig('testFig.png', bbox_inches='tight')