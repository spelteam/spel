<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="12.2">
  <zoom_level>7</zoom_level>
  <element>
    <type>com.umlet.element.Note</type>
    <coordinates>
      <x>1295</x>
      <y>525</y>
      <w>203</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>Notes:
 
* cv: refers to  OpenCV 3.x
* gm: OpenGM 2.x
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>3416</x>
      <y>819</y>
      <w>343</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>/Solver/
--
-id: int
-name: string
--
+Solver()
+~Solver()
+solve(v: Sequence): vector&lt;Solvlet&gt;
+solve(v: Sequence, params: map&lt;string, float&gt;): vector&lt;Solvlet&gt;
+getName(): string
+getId(): int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>3843</x>
      <y>812</y>
      <w>301</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Sequence
--
+id: int
+name: string
+frames: vector&lt;Frame*&gt;
--
+Sequence()
+Sequence(seq: const Sequence&amp;)
+Sequence(id: int, name: string, frames: vector&lt;Frame*&gt;)
+~Sequence()
+getID(): const int
+setID(_id: const int&amp;)
+getName(): const string
+setName(_name: const string&amp;)
+getFrames(): const vector&lt;Frame*&gt;
+setFrames(frames: const vector&lt;Frame*&gt;&amp;)
+computeInterpolation(params)
+estimateUniformScale(params: map&lt;string, float&gt;&amp;)
+interpolateSlice(slice: vector&lt;Frame*&gt;, params: map&lt;string, float&gt;&amp;): vector&lt;Frame*&gt;
+interpolateSlice2D(slice: vector&lt;Frame*&gt;, params: map&lt;string, float&gt;&amp;): vector&lt;Frame*&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>3647</x>
      <y>1148</y>
      <w>644</w>
      <h>322</h>
    </coordinates>
    <panel_attributes>TLPSSolver
--
--
+TLPSSolver()
+~TLPSSolver()
+solve(frames: Sequence&amp;): vector&lt;Solvlet&gt;
+solve(frames: Sequence&amp;, params: map&lt;string, float&gt;): vector&lt;Solvlet&gt;
+solve(frames: Sequence&amp;, params: map&lt;string, float&gt;, solvlets: vector&lt;Solvlet&gt;): vector&lt;Solvlet&gt;
+solveWindowed(sequence: Sequence&amp;, params: map&lt;string, float&gt;): vector&lt;Solvlet&gt;
+solveGlobal(sequence: Sequence&amp;, params: map&lt;string, float&gt;): vector&lt;Solvlet&gt;
+evaluateSolution(frame: Frame*, labels: vector&lt;LimbLabel&gt;, params: map&lt;string, float&gt;): float
+findFrameIndexById(id: int, frames: vector&lt;Frame*&gt;): int
+computeScoreCost(label: const LimbLabel&amp;, params: map&lt;string, float&gt;): float
+computeJointCost(child: const LimbLabel&amp;, parent: const LimbLabel&amp;, params: map&lt;string, float&gt;, toChild: bool): float
+computeNormJointCost(child: const LimbLabel&amp;, parent: const LimbLabel&amp;, params: map&lt;string, float&gt;, jointMax: float, toChild: bool): float
+computePriorCost(label: const LimbLabel&amp;, prior: const BodyPart&amp;, skeleton: const Skeleton&amp;, params: map&lt;string, float&gt;): float
+computeNormPriorCost(label: const LimbLabel&amp;, prior: const BodyPart&amp;, skeleton: const Skeleton&amp;, params: map&lt;string, float&gt;, max: float): float
+computePastTempCost(thisLabel: const LimbLabel&amp;, pastLabel: const LimbLabel&amp;, params: map&lt;string, float&gt;): float
+computeNormPastTempCost(thisLabel: const LimbLabel&amp;, pastLabel: const LimbLabel&amp;, params: map&lt;string, float&gt;, jointMax: float): float
+computeFutureTempCost(thisLabel: const LimbLabel&amp;, futureLabel: const LimbLabel&amp;, params: map&lt;string, float&gt;): float
+computeNormFutureTempCost(thisLabel: const LimbLabel&amp;, futureLabel: const LimbLabel&amp;, params: map&lt;string, float&gt;, max: float): float
+computeAnchorCost(thisLabel: const LimbLabel&amp;, anchor: Frame*, params: map&lt;string, float&gt;): float
+computeNormAnchorCost(thisLabel: const LimbLabel&amp;, anchor: Frame*, params: map&lt;string, float&gt;, jointMax: float): float
+slice(frames: const vector&lt;Frame*&gt;&amp;): vector&lt;vector&lt;Frame*&gt;&gt; </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>2996</x>
      <y>903</y>
      <w>587</w>
      <h>258</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>574;21;21;245</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>3556</x>
      <y>903</y>
      <w>433</w>
      <h>258</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>21;21;420;245</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>3073</x>
      <y>819</y>
      <w>231</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>Solvlet
--
+frameId: int
+labels: vector&lt;LimbLabel&gt;
--
+Solvlet()
+Solvlet(id: int, labels: vector&lt;LimbLabel&gt;)
+~Solvlet()
+getFrameID(): const int
+setFrameID(id: int)
+setLables(labels: vector&lt;LimbLabel&gt;)
+getLabels(): const vector&lt;LimbLabel&gt;
+getLabelsPtr(): const vector&lt;LimbLabel&gt;*
+toSkeleton(scale: float): Skeleton
+evaluateSolution(frame: Frame*, params: map&lt;string, float&gt;): float
+operator=: Solvlet&amp;
+operator&lt;: bool
+operator&gt;: bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>2597</x>
      <y>826</y>
      <w>434</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>Solution
--
-id: int
-sequenceId: int
-solverId: int
-solverParams: vector&lt;float&gt;
-solvlets: vector&lt;Solvlet&gt;
--
+Solution()
+Solution(id: int, solverId: int, seqId: int, params: vector&lt;float&gt;, sol: vector&lt;Solvlet&gt;)
+getId(): int
+setId(id: int)
+getSolvlets(): vector&lt;Solvletl&gt;
+setSolvlets(labels: vector&lt;Solvlet&gt;)

+operator=: Solution&amp;
+operator==: bool
+operator!=: bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Package</type>
    <coordinates>
      <x>2590</x>
      <y>784</y>
      <w>1701</w>
      <h>707</h>
    </coordinates>
    <panel_attributes>Solving
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <group>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>1274</x>
        <y>28</y>
        <w>497</w>
        <h>294</h>
      </coordinates>
      <panel_attributes>ImageSimilarityMatrix
--
imageSimilarityMatrix: Mat
imageShiftMatrix: Mat
--
ImageSimilarityMatrix()
ImageSimilarityMatrix(*&gt;&amp;)
buildImageSimilarityMatrix(frames: const vector&lt;Frame*&gt;&amp;)
m: const ImageSimilarityMatrix&amp;)
ImageSimilarityMatrix(frames: const vector&lt;FramebuildMaskSimilarityMatrix(frames: const vector&lt;Frame*&gt;&amp;)
read(filename: string): bool
write(filename string): bool
size(): int
min(): float
max(): float
mean(): float
stdev(): float
at(row: int, col: int): float
getShift(row: int, col: int): Point2f
getPathCost(path: vector&lt;int&gt;): float
clos(): Mat
operator==(s: const ImageSimilarityMatrix&amp;): bool
operator!=(s: const ImageSimilarityMatrix&amp;): bool
operator=(s: const ImageSimilarityMatrix&amp;): ImageSimilarityMatrix&amp;
computeMSMcell(left: Frame*, right: Frame*, maxFrameHeight: int)
computeISMcell(left: Frame*, right: Frame*, maxFrameHeight: int)</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>1274</x>
        <y>343</y>
        <w>490</w>
        <h>119</h>
      </coordinates>
      <panel_attributes>MinSpanningTree
--
mst: tree&lt;int&gt;
--
+MinSpanningTree()
+MinSpanningTree(mst: MinSpanningTree&amp;)
+MinSpanningTree(ism: const ImageSimilarityMatrix&amp;, rootNode: int, treeSize: int, threshold: float)
+MinSpanningTree()
+size(): int
+getMST(): tree&lt;int&gt;
+build(ism: const ImageSimilarityMatrix&amp;, rootNode: int, treeSize:int, threshold: float)</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>1267</x>
        <y>0</y>
        <w>511</w>
        <h>483</h>
      </coordinates>
      <panel_attributes>bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
  <group>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>609</x>
        <y>805</y>
        <w>1099</w>
        <h>210</h>
      </coordinates>
      <panel_attributes>/Detector/
--
+frames: vector&lt;Frame*&gt;
+maxFrameHeight: uint32_t
+debugLevelParam: uint8_t
--
+getId(): int
+setId(int _id)
+train(frames: vector&lt;Frame&gt;, params: map&lt;string, float&gt;)
+detect(frame: Frame*, params: map&lt;string, float&gt;, limbLabels: map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;): map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;
+merge(first: map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;, second: map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;, secondUnfiltered: map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt; ): map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;
+getBoneLength(begin: Point2f, end: Point2f): float;
+getBoneWidth(length: float, bpdyPart: BpodyPart): float;
+getBodyPartRect(bodyPart: BodyPart, j0: Point2f, j1: Point2f, blockSize: Size): POSERECT &lt;Point2f&gt;
+rotateImageToDefault(imgSource: Mat, initialRectL POSERECT &lt;Point2f&gt;&amp;, angle: float, size: Size): Mat;
+generateLabel(bodyPart: BodyPart, j0: Point2f, j1: Point2f, detectorName: string, _usedet: float): LimbLabel
+generateLabel(bodyPart: BodyPart, workFrame: Frame*, p0: Point2f, p1: Point2f): LimbLabel
+generateLabel(boneLength: float, rotationAngle: float, x: float, y: float, bodyPart: BodyPart, workFrame:Frame*): LimbLabel
+compare(): float
+filterLimbLabels(sortedLabels: vector &lt;LimbLabel&gt;&amp;, uniqueLocationCandidates: float, uniqueAngleCandidates: float): vector &lt;LimbLabel&gt;</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Relation</type>
      <coordinates>
        <x>266</x>
        <y>994</y>
        <w>742</w>
        <h>343</h>
      </coordinates>
      <panel_attributes>lt=&lt;&lt;.</panel_attributes>
      <additional_attributes>735;21;21;336</additional_attributes>
    </element>
    <element>
      <type>com.umlet.element.Relation</type>
      <coordinates>
        <x>994</x>
        <y>994</y>
        <w>42</w>
        <h>343</h>
      </coordinates>
      <panel_attributes>lt=&lt;&lt;.</panel_attributes>
      <additional_attributes>35;21;21;336</additional_attributes>
    </element>
    <element>
      <type>com.umlet.element.Relation</type>
      <coordinates>
        <x>1057</x>
        <y>994</y>
        <w>616</w>
        <h>343</h>
      </coordinates>
      <panel_attributes>lt=&lt;&lt;.</panel_attributes>
      <additional_attributes>21;21;609;336</additional_attributes>
    </element>
    <group>
      <element>
        <type>com.umlet.element.Class</type>
        <coordinates>
          <x>42</x>
          <y>1743</y>
          <w>742</w>
          <h>161</h>
        </coordinates>
        <panel_attributes>PartModel
--
+nBins: byte
+partHistogram: vector&lt;vector&lt;vector&lt;float&gt;&gt;&gt;
+bgHistogram: vector&lt;vector&lt;vector&lt;float&gt;&gt;&gt;
+sizeFg: int
+sizeBG: int;
+fgNumSamples: int
+bgNumSamples: int
+fgSampleSizes: vector&lt;uint32_t&gt;
+bgSampleSizes: vector&lt;uint32_t&gt;
+gfBlankSizes: vector&lt;uint32_t&gt;
--
PartModel(_nBins: uint8_t)
operator=(model: PartModel&amp;): PartModel&amp;</panel_attributes>
        <additional_attributes/>
      </element>
      <element>
        <type>com.umlet.element.Class</type>
        <coordinates>
          <x>42</x>
          <y>1351</y>
          <w>742</w>
          <h>385</h>
        </coordinates>
        <panel_attributes>ColorHistDetector
--
+id: int;
+nBins: uint8_t
+partModels: map &lt;int, PartModel&gt;
+useCSdet: float
+pixelDistributions: map &lt;int32_t, Mat&gt;
+pixelLabels: map &lt;int32_t, Mat&gt;
+comparer_bodyPart: BodyPart*
+comparer_frame: Frame**
+comparer_j0: Point2f*
+comparer_j1: Point2f*
--
+ColorHistDetector(_nBins: int8_t)
+~ColorHistDetector()
+getId(): int
+setId(int _id) 
+train(_frames: vector&lt;Frame*&gt;, params: map&lt;string, float&gt;)
+detect(frame: Frame*, params: map&lt;string, float&gt;, limbLabels: map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;): map &lt;uint32_t, vector&lt;LimbLabel&gt; &gt;
+getNBins(): byte
+getFrames: vector &lt;Frame*&gt;
operator=(c: ColorHistDetector&amp;): ColorHistDetector&amp;
+computePixelBelongingLikelihood(partModel: PartModel&amp;, r: byte, g: byte, b: byte): float
+setPartHistogram(partModel: PartModel&amp;, partColors: vector &lt;Point3i&gt;&amp;)
+addPartHistogram(partModel: PartModel&amp;, partColors: vector &lt;Point3i&gt;&amp;, nBlankPixels: int)
+addBackgroundHistogram(partModel: PartModel&amp;, bgColors: vector &lt;Point3i&gt;)
+getAvgSampleSizeFg(partModel: PartModel&amp;): float
+getAvgSampleSizeFgBetween(partModel: PartModel&amp;, s1: int, s2: int): float
+matchPartHistogramsED(partModelPrev: PartModel&amp;, partModel: PartModel&amp;): float
+buildPixelDistributions(frame: Frame*): map &lt;int, Mat&gt;
+buildPixelLabels(frame: Frame*, pixelDistributions: map&lt;int, Mat&gt;): map &lt;int, Mat&gt;
+generateLabel(bodyPart: BodyPart, frame: Frame, j0: Point2f, j1 : Point2f): LimbLabel
+compare(): float
+compare(bodyPart: BodyPart, frame: Frame*, pixelDistributions: map &lt;int32_t, Mat&gt;, pixelLabels: map &lt;int32_t, Mat&gt;, j0: Point2f, j1: Point2f): float</panel_attributes>
        <additional_attributes/>
      </element>
      <element>
        <type>com.umlet.element.Package</type>
        <coordinates>
          <x>35</x>
          <y>1330</y>
          <w>756</w>
          <h>595</h>
        </coordinates>
        <panel_attributes>bg=orange</panel_attributes>
        <additional_attributes/>
      </element>
    </group>
    <group>
      <element>
        <type>com.umlet.element.Package</type>
        <coordinates>
          <x>812</x>
          <y>1330</y>
          <w>560</w>
          <h>595</h>
        </coordinates>
        <panel_attributes>bg=orange</panel_attributes>
        <additional_attributes/>
      </element>
      <element>
        <type>com.umlet.element.Class</type>
        <coordinates>
          <x>819</x>
          <y>1652</y>
          <w>539</w>
          <h>70</h>
        </coordinates>
        <panel_attributes>PartModel
--
+partModelRect: POSERECT&lt;Point2f&gt;
+keyPoints: vector &lt;KeyPoint&gt;
+descriptos: Mat
--</panel_attributes>
        <additional_attributes/>
      </element>
      <element>
        <type>com.umlet.element.Class</type>
        <coordinates>
          <x>819</x>
          <y>1351</y>
          <w>539</w>
          <h>287</h>
        </coordinates>
        <panel_attributes>SurfDetector
--
id: int
minHessian: uint32_t
useSURFdet: float
knnMatchCoeff: float
keyPoints: vector &lt;KeyPoint&gt;
comparer_bodyPart: BodyPart*
comparer_model: PartModel*
comparer_j0: Point2f *
comparer_j1: Point2f *
partModels: map &lt;uint32_t, map &lt;uint32_t, PartModel&gt;&gt; 
labelModels: map &lt;uint32_t, map &lt;uint32_t, vector &lt;PartModel&gt;&gt;&gt;--
+surfDetector()
+~surfDetector()
+getId(): int
+setId(int _id) 
+train(frames: vector&lt;Frame&gt;, params: map&lt;string, float&gt;)
+detect(frame: Frame*, params: map&lt;string, float&gt;, limbLabels: vector&lt;vector&lt;LimbLabel&gt;&gt;): vector&lt;vector&lt;LimbLabel&gt;&gt;
+getPartModels(): map &lt;uint32_t, map &lt;uint32_t, PartModel&gt;&gt;
+getLabelModels(): map &lt;uint32_t, map &lt;uint32_t, vector &lt;PartModel&gt;&gt;&gt;
+computeDescriptors(frame: Frame*, minHessian: uint32_t): map &lt;uint32_t, PartModel&gt; 
+computeDescriptors(, imgMat: Mat, minHessian: uint32_t, keyPoints: vector &lt;KeyPoint&gt;): PartModel 
+generateLabel(bodyPart: BodyPart, frame: Frame*, j0: Point2f , j1: Point2f): LimbLabel 
+compare(bodyPart: BodyPart, model: PartModel, j0: Point2f , j1: Point2f): float
+compare(void): float
</panel_attributes>
        <additional_attributes/>
      </element>
    </group>
    <group>
      <element>
        <type>com.umlet.element.Class</type>
        <coordinates>
          <x>1400</x>
          <y>1351</y>
          <w>1078</w>
          <h>448</h>
        </coordinates>
        <panel_attributes>HogDetector
--
+id: int
+partSize: map&lt;uint32_t, Size&gt;
+partModels: map&lt;uint32_t, map&lt;uint32_t, PartModel&gt;&gt;
+debugLevelParam: uint8_t
+savedCellSize: Size
+labelModelsЖ map &lt;uint32_t, map &lt;uint32_t, vector &lt;PartModel&gt;&gt;&gt;
+bGrayImages: bool
+useHoGdet: float
+blockSize: Size
+blockStride: Size
+cellSize: Size
+wndSize: Size
+nbins: uint8_t
+wndSigma: double
+thresholdL2hys: double
+gammaCorrection: bool
+nlevels: int
+wndStride: Size
+padding: Size
+derivAperture: int
+histogramNormType: int
+comparer_bodyPart: BodyPart*;
+comparer_model: PartModel*;
--
+HogDetector()
+~HogDetector()
+getId(): int
+setId(int _id) 
+train(frames: vector&lt;Frame&gt;, params: map&lt;string, float&gt;)
+detect(frame: Frame*, params: map&lt;string, float&gt;, limbLabels: map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;): map &lt;uint32_t, vector &lt;LimbLabel&gt; &gt;
+getLabelModels(void): map &lt;uint32_t, map &lt;uint32_t, vector &lt;PartModel&gt;&gt;&gt;
+getPartModels(void): map &lt;uint32_t, map &lt;uint32_t, PartModel&gt;&gt;
+generateLabel(bodyPart: BodyPart, frame: Frame*, j0: Point2f, j1: Point2f): LimbLabel
+getMaxBodyPartHeightWidth(frames: vector&lt;Frame*&gt;, blockSize: Size, resizeFactor: float): map&lt;uint32_t, Size&gt;
+computeDescriptors(bodyPart: BodyPart, j0: Point2f, j1: Point2f, imgMat: Mat, nbins: int, wndSize: Size, blockSize: Size, blockStride: SIze, cellSize: Size, wndSig,a: double, thresholdL2hys: double, gammaCorrection: bool, nlevels: int, derivAperture: int, histogramNormType: int, bGrayImages: bool): PartModel
+computeDescriptors(frame: Frame*, nbins: int, blockSize: Size, blockStride: Size, cellSize: Size, wndSigma: double, thresholdL2hys: double, gammaCorrection: bool, nlevels: int, derivAperture: int, histogramNormType: int, bGrayImages: bool): map&lt;uint32_t, PartModel&gt;
+compare(bodyPart: BodyPart, partModel: PartModel, nbins: uint8_t): float
+compare(): float</panel_attributes>
        <additional_attributes/>
      </element>
      <element>
        <type>com.umlet.element.Class</type>
        <coordinates>
          <x>1400</x>
          <y>1806</y>
          <w>1078</w>
          <h>77</h>
        </coordinates>
        <panel_attributes>PartModel
--
+partModelRect: POSERECT&lt;Point2f&gt;
+gradientStrengths: vector &lt;vector &lt;vector &lt;float&gt;&gt;&gt;
+partImage: Mat;
+descriptos: vector&lt;float&gt;
--</panel_attributes>
        <additional_attributes/>
      </element>
      <element>
        <type>com.umlet.element.Package</type>
        <coordinates>
          <x>1393</x>
          <y>1330</y>
          <w>1092</w>
          <h>595</h>
        </coordinates>
        <panel_attributes>bg=orange</panel_attributes>
        <additional_attributes/>
      </element>
    </group>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>0</x>
        <y>784</y>
        <w>2527</w>
        <h>1211</h>
      </coordinates>
      <panel_attributes>Detecting
bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
  <group>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>203</x>
        <y>21</y>
        <w>287</w>
        <h>420</h>
      </coordinates>
      <panel_attributes>/Frame/
--
-id: int
-image: cv:Mat 
-mask: cv:Mat
-skeleton: Skeleton
-groundPoint: Point2f
-parentFrameID: int 
-imageSize: Size 
-maskSize: Size
-frametype: FRAMETYPE
--
+Frame()
+Frame(_frametype: FRAMETYPE)
+~Frame()
+getPartPolygon(partId: int): vector&lt;cv:Point2f&gt;
+getID(): int
+setID(_id: int)
+getImage(): Mat
+setImage(_image: Mat)
+getMask(): Mat
+setMask(_mask: Mat)
+getSkeleton(): Skeleton
+getSkeletonPtr(): Skeleton*
+shiftSkeleton2D(shift:Point2f)
+setSkeleton(_skeleton: Skeleton)
+getGroundPoint(): Point2f
+setGroundPoint(_groundPoint: Point2f)
+getFrametype(): FRAMETYPE
+getParentFrameID(): int
+setParentFrameID(_parentFrameID: float)
+Resize(maxHeight: uint32_t): float
+clone(dest: Frame*): Frame*
+getFrameSize(): Size
+getImageSize(): Size
+getMaskSize(): Size
+FramePointerComparer(frame1: Frame*, frame2: Frame*):bool</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>7</x>
        <y>483</y>
        <w>196</w>
        <h>56</h>
      </coordinates>
      <panel_attributes>Keyframe
--
--
+Keyframe()
+~Keyframe()</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Relation</type>
      <coordinates>
        <x>70</x>
        <y>420</y>
        <w>252</w>
        <h>70</h>
      </coordinates>
      <panel_attributes>lt=&lt;&lt;.</panel_attributes>
      <additional_attributes>245;21;21;63</additional_attributes>
    </element>
    <element>
      <type>com.umlet.element.Relation</type>
      <coordinates>
        <x>301</x>
        <y>420</y>
        <w>28</w>
        <h>70</h>
      </coordinates>
      <panel_attributes>lt=&lt;&lt;.</panel_attributes>
      <additional_attributes>21;21;21;63</additional_attributes>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>224</x>
        <y>483</y>
        <w>196</w>
        <h>56</h>
      </coordinates>
      <panel_attributes>Interpolation
--
--
+Interpolation()
+~Interpolation()</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Relation</type>
      <coordinates>
        <x>301</x>
        <y>420</y>
        <w>273</w>
        <h>70</h>
      </coordinates>
      <panel_attributes>lt=&lt;&lt;.</panel_attributes>
      <additional_attributes>21;21;266;63</additional_attributes>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>469</x>
        <y>483</y>
        <w>196</w>
        <h>56</h>
      </coordinates>
      <panel_attributes>Lockframe
--
--
+Lockframe()
+~Lockframe()</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>35</x>
        <y>21</y>
        <w>140</w>
        <h>77</h>
      </coordinates>
      <panel_attributes>Frame Type
--
UNDEFINED
KEYFRAME
LOCKFRAME
INTERPOLATIONFRAME
bg=gray
fg=red</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>0</x>
        <y>0</y>
        <w>742</w>
        <h>553</h>
      </coordinates>
      <panel_attributes>Frame
bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
  <group>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>2625</x>
        <y>1134</y>
        <w>1008</w>
        <h>336</h>
      </coordinates>
      <panel_attributes>EmptyPackage
bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>2632</x>
        <y>1155</y>
        <w>994</w>
        <h>224</h>
      </coordinates>
      <panel_attributes>NSKPSolver
--
--
+NSKPSolver()
+~NSKPSolver()
+solve(frames: Sequence&amp;): vector&lt;Solvlet&gt;
+solve(frames: Sequence&amp;, params: map&lt;string, float&gt;): vector&lt;Solvlet&gt;
+solve(frames: Sequence&amp;, params: map&lt;string, float&gt;, ISM: const ImageSimilarityMatrix&amp;): vector&lt;Solvlet&gt; 
+suggestKeyframes(ism: const ImageSimilarityMatrix&amp;, params: map&lt;string, float&gt;): vector&lt;Point2i&gt;
+propagateKeyframes(frames: vector&lt;Frame*&gt;&amp;, params: map&lt;string, float&gt;, ism: const ImageSimilarityMatrix&amp;, trees: const vector&lt;MinSpanningTree&gt;&amp;, ignore: vector&lt;int&gt;&amp;): vector&lt;Solvlet&gt;
+buildFrameMSTs(ism: const ImageSimilarityMatrix&amp;, params: map&lt;string, float&gt;): vector&lt;MinSpanningTree&gt;
+evaluateSolution(frame: Frame*, labels: vector&lt;LimbLabel&gt;, params: map&lt;string, float&gt;): float
+findFrameIndexById(id: int, frames: vector&lt;Frame*&gt;): uint32_t
+computeScoreCost(label: const LimbLabel&amp;, params: map&lt;string, float&gt;): float
+computeJointCost(child: const LimbLabel&amp;, parent: const LimbLabel&amp;, params: map&lt;string, float&gt;, toChild: bool): float
+computeNormJointCost(child: const LimbLabel&amp;, parent: const LimbLabel&amp;, params: map&lt;string, float&gt;, max: float, toChild: bool): float
+computePriorCost(label: const LimbLabel&amp;, prior: const BodyPart&amp;, skeleton: const Skeleton&amp;, params: map&lt;string, float&gt;): float
+computeNormPriorCost(label: const LimbLabel&amp;, prior: const BodyPart&amp;, skeleton: const Skeleton&amp;, params: map&lt;string, float&gt;, min: float, max: float): float
+propagateFrame(frameId: int, frames: const vector&lt;Frame*&gt;, params: map&lt;string, float&gt;, ism: const ImageSimilarityMatrix&amp;, trees: const vector&lt;MinSpanningTree&gt;&amp;, ignore: vector&lt;int&gt; &amp;): vector&lt;NSKPSolver::SolvletScore&gt;
+test(frameId: int, frames: const vector&lt;Frame*&gt;&amp;, params: map&lt;string, float&gt;, ism: const ImageSimilarityMatrix&amp;, trees: const vector&lt;MinSpanningTree&gt;&amp;, ignore: vector&lt;int&gt;&amp;): int
</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>2632</x>
        <y>1386</y>
        <w>994</w>
        <h>70</h>
      </coordinates>
      <panel_attributes>SolvletScore
--
solvlet: Solvlet
score: float
parentFrame: int
--</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
  <group>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>763</x>
        <y>490</y>
        <w>490</w>
        <h>112</h>
      </coordinates>
      <panel_attributes>PHPoint3
--
--
+PHPoint3();
+PHPoint3(_x: T, _y: T);
+PHPoint3(pt: Point3_&lt;T&gt;&amp;);
+PHPoint3(pt: Point_&lt;T&gt;&amp;);
+PHPoint(pt: CvPoint3D32f&amp;);
+PHPoint(v: Vec&lt;T, 3&gt;&amp;);
+operator&lt;(pt: PHPoint3&amp;): bool;</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>763</x>
        <y>364</y>
        <w>490</w>
        <h>119</h>
      </coordinates>
      <panel_attributes>PHPoint
--
--
+PHPoint()
+PHPoint(_x: T, _y: T)
+PHPoint(pt: const Point_&lt;T&gt;&amp;)
+PHPoint(pt: const CvPoint&amp;)
+PHPoint(pt: const CvPoint2D32f&amp;)
+PHPoint(sz: const Size_&lt;T&gt;&amp;)
+PHPoint(v: const Vec&lt;T, 2&gt;&amp;)
+operator&lt;(pt: const PHPoint&amp;): const bool</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>763</x>
        <y>133</y>
        <w>490</w>
        <h>224</h>
      </coordinates>
      <panel_attributes>POSERECT &lt;T&gt;
--
+p1: T
+p2: T
+p3: T
+p4: T
--
+POSERECT()
+POSERECT(poserect: POSERECT&lt;T&gt;&amp;)
+POSERECT(poserect: POSERECT&lt;T&gt;&amp;&amp;)
+POSERECT(_point1: T, _point2: T, _point3: T, _point4: T)
+containsPoint(point: T): int8_t
+asVector(): vector &lt;T&gt;
+GetMinMaxXY(minx: D&amp;, miny: D&amp;, maxx: D&amp;, maxy: D&amp;)
+GetCenter(): D
+operator=(rect &lt;POSERECT&lt;T&gt;&amp;) POSERECT&lt;T&gt;&amp;
+operator=(rect &lt;POSERECT&lt;T&gt;&amp;&amp;) POSERECT&lt;T&gt;&amp;
+operator==(rect &lt;POSERECT&lt;T&gt;&amp;): bool
+operator!=(rect &lt;POSERECT&lt;T&gt;&amp;): bool
+RectSize(): D</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>763</x>
        <y>21</y>
        <w>490</w>
        <h>105</h>
      </coordinates>
      <panel_attributes>PoseHelper
--
--
+distSquared(one: T, two: T): double
+distSquared3d(one: T, two: T): double
+angle2D(x1: double, y1: double, x2: double, y2: double): double
+interpolateFloat(prevAngle: double, nextAngle: double, step: int, nextStep: int): double
+rotatePoint2D(point: const T, pivot: const T, degrees: const float): T
+copyTree(dst: tree &lt;T, tree_node_allocator&gt;&amp;, src: tree &lt;T, tree_node_allocator&gt;&amp;)
+RecalculateScoreIsWeak(labels: vector &lt;LimbLabel&gt;&amp;, detectorName: string, standardDiviationTreshold: float)</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>749</x>
        <y>0</y>
        <w>511</w>
        <h>616</h>
      </coordinates>
      <panel_attributes>PoseHelper
bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
  <group>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>1792</x>
        <y>378</y>
        <w>539</w>
        <h>238</h>
      </coordinates>
      <panel_attributes>Score
--
+score: float
+detName: string
+coeff: float
+isWeak: bool
--
+Score()
+Score(sc: float, name: string, _coeff: name)
+operator=(s: const Score&amp;): Score&amp;
+operator==(s: const Score&amp;): const bool
+operator!=(s: const Score&amp;): const bool
+operator&lt;(s: const Score&amp;): const bool
+operator&gt;(s: const Score&amp;): const bool
+getScore(): const float
+setScore(_score: float)
+getDetName(): const string
+setDetName(_detName: string)
+getCoeff(): const float
+setCoeff(_coeff: float)
+getIsWeak(): const bool
+setIsWeak(_isWeak: bool)</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>1792</x>
        <y>28</y>
        <w>539</w>
        <h>343</h>
      </coordinates>
      <panel_attributes>LimbLabel
--
+limbId: int
+center: Point2f
+angle: float
+polygon: vector&lt;Point2f&gt;
+scores: vector&lt;Score&gt;
+isOccluded: bool
--
+LimbLabel()
+LimbLabel(ll: LimbLabel&amp;)
+LimbLabel(_id:int, _centre: Point2f, _angle: float, _polygon: vector&lt;Point2f&gt;, _scores: vector&lt;Score&gt;, _isOccluded: bool)
+~LimbLabel()
+toString: string;
+addScore(detectionScore: Score)
+getScores(): vector&lt;Score&gt;
+setScores(vector&lt;Score&gt; _score)
+getEndPoints(p0: Point2f&amp;, p1: Point2f&amp;)
+getCenter(): Point2f
+getLimbID(): int
+getAngle(): float
+getPolygon(): vector &lt;Point2f&gt;
+getIsOccluded(bNegativeToPositive: bool): bool
+getAvgScore(): float;
+operator=(ll: LimbLabel&amp;): Score&amp;
+operator==(ll: LimbLabel&amp;): bool
+operator!=(ll: LimbLabel&amp;): bool
+operator&lt;(ll: LimbLabel&amp;):bool
+operator&gt;(ll: LimbLabel&amp;):bool
+containsPoint(pt: Point2f): bool</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>1785</x>
        <y>0</y>
        <w>553</w>
        <h>623</h>
      </coordinates>
      <panel_attributes>*Part Labelling*
bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
  <group>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>3318</x>
        <y>21</y>
        <w>245</w>
        <h>329</h>
      </coordinates>
      <panel_attributes>Skeleton
--
+name: string
+partTree: tree&lt;BodyPart&gt;
+jointTree: tree&lt;BodyJoint&gt;
+scale: float
--
+Skeleton()
+Skeleton(s: const Skeleton&amp;);
+~Skeleton()
+getName(): const string
+setName(_name: string)
+getPartTreePtr(): tree&lt;BodyPart&gt;*
+getPartTree(): const tree&lt;BodyPart&gt;
+setPartTree(_partTree: tree&lt;BodyPart&gt;)
+getJointTreePtr(): tree&lt;BodyJoint&gt;*
+getJointTree(): const tree&lt;JointTree&gt;
+setJointTree(_jointTree: tree&lt;BodyJoint&gt;)
+getBodyJoint(jointID: int): BodyJoint*
+getScale(): const float
+setScale(_scale: float)
+infer2D()
+infer3D()
+operator=(s: const Skeleton&amp;): Skeleton&amp;
+operator==(s: const Skeleton&amp;): const bool
+operator!=(s: const Skeleton&amp;): const bool
+getPartTreeCount(): uint32_t
+getBodyJoint(jointID: int): BodyJoint*
+getBodyPart(partID: int): BodyPart*</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>2835</x>
        <y>21</y>
        <w>476</w>
        <h>308</h>
      </coordinates>
      <panel_attributes>BodyJoint
--
+limbId: int
+jointName: string
+imageLocation: cv:Point2f
+spaceLocation: cv:Point3f
+depthSign: bool
--
+BodyJoint()
+BodyJoint(bodyJoint: BodyJoint&amp;);
+BodyJoint(bodyJoint: BodyJoint&amp;&amp;);
+BodyJoint(id: int, name: string, imgLoc: Point2f, spaceLoc: Point, depth: bool)
+~BodyJoint()
+operator=(bodyJoint: BodyJoint&amp;): BodyJoint&amp;;
+operator=(bodyJoint: BodyJoint&amp;&amp;): BodyJoint&amp;;
+getLimbID(): int
+setLimbID(_limbID: int)
+getJointName(): string
+setJointName(_jointName: string)
+getImageLocation(): Point2f
+setImageLocation(_imageLocation: Point2f)
+getSpaceLocation(): Point3f
+setSpaceLocation(_spaceLocation: Point3f)
+getDepthSign(): bool
+setDepthSign(_depthSign: bool)
+operator==(bj: BodyJoint&amp;): bool
+operator!=(bj: BodyJoint&amp;): bool</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Class</type>
      <coordinates>
        <x>2352</x>
        <y>21</y>
        <w>476</w>
        <h>518</h>
      </coordinates>
      <panel_attributes>BodyPart
--
+partId: int
+partName: string
+parentJoint: int
+childJoint: int
+isOccluded: bool
+spaceLength: float 
+partPolygon: POSERECT &lt;Point2f&gt;
+lwRatio: float
+relativeLength: float
+searchRadius: float
+rotationSearchRange: float
--
+BodyPart()
+BodyPart(bodyPart: BodyPart&amp;)
+BodyPart(bodyPart: BodyPart&amp;&amp;)
+BodyPart(id: int, name: string, pJoint: int, cJoint: int, isOcc: bool, spaceLeng: float)
+~BodyPart()
+operator=(bodyPart: BodyPart&amp;):BodyPart&amp;
+operator=(bodyPart: BodyPart&amp;&amp;):BodyPart&amp;
+getPartID(): int
+setPartID(_partID: int)
+getPartName(): string;
+setPartName(_partName: string)
+getParentJoint(): int
+setParentJoint(_parentJoint: int)
+getChildJoint(): int
+setChildJoint(_childJoint: int)
+getIsOccluded(): bool
+setIsOccluded(_isOccluded: bool)
+getSpaceLength(): float
+setSpaceLength(_spaceLength: float)
+getPartPolygon(): POSERECT &lt;Point2f&gt;
+setPartPolygon(_partPolygon: POSERECT &lt;Point2f&gt;)
+getLWRatio(): float;
+setLWRatio(_lwRatio: float);
+getRelativeLength(): float;
+setRelativeLength(_relativeLength: float)
+getSearchRadius(): float
+setSearchRadius(_radius: float)
+getRotationSearchRange(): float
+setRotationSearchRange(_rotationAngle: float)
+operator==(bp: BodyPart&amp;): bool
+operator!=(bp: BodyPart&amp;): bool
</panel_attributes>
      <additional_attributes/>
    </element>
    <element>
      <type>com.umlet.element.Package</type>
      <coordinates>
        <x>2345</x>
        <y>0</y>
        <w>1239</w>
        <h>770</h>
      </coordinates>
      <panel_attributes>*Skeletal Structure*
bg=orange</panel_attributes>
      <additional_attributes/>
    </element>
  </group>
</diagram>
